install.packages("rredlist")  # Install the 'rredlist' package from CRAN to access IUCN Red List API

library(rredlist)             # Load the 'rredlist' package to make its functions available in the session

key <- "key" # Store your IUCN API key as a character string

# Create a data frame 'df' with columns for genus and species names of target organisms
df <- data.frame(
  genus = c("Loxodonta", "Panthera", "Gorilla"),  # Vector of genus names
  species = c("africana", "leo", "gorilla"),      # Vector of corresponding species names
  stringsAsFactors = FALSE                        # Ensure text strings are kept as characters, not factors
)

results <- list()  # Initialize an empty list to collect assessment results from the API

# Loop over each row in the species data frame
for (i in 1:nrow(df)) {
  # Use tryCatch to safely attempt to fetch IUCN Red List data for each species
  res <- tryCatch(
    rl_species(genus = df$genus[i], species = df$species[i], key = key),  # Call API for current species
    error = function(e) return(NULL)  # If there's an error (e.g., species not found), return NULL
  )
  
  # Proceed only if the result is not NULL and contains a valid 'assessments' data frame
  if (!is.null(res) && !is.null(res$assessments) && is.data.frame(res$assessments) && nrow(res$assessments) > 0) {
    assessments <- res$assessments  # Extract the 'assessments' data frame from the result
    assessments$genus <- df$genus[i]     # Add genus information to the assessment
    assessments$species <- df$species[i] # Add species information to the assessment
    results[[length(results) + 1]] <- assessments  # Append the assessment to the results list
  }
}

# Combine all individual assessments in the results list into a single data frame
all_assessments <- do.call(rbind, results)  # Row-bind all assessments together

# Extract the scope description from the nested 'scopes' column, if it exists
all_assessments$scope_description <- sapply(all_assessments$scopes, function(scope) {
  if (is.data.frame(scope) && "description" %in% names(scope)) {  # Check if 'description' exists in the data frame
    if (is.data.frame(scope$description) && "en" %in% names(scope$description)) {  # Check if English description exists
      return(scope$description$en[1])  # Return the first English description
    }
  }
  return(NA)  # If structure is missing or invalid, return NA
})

all_assessments$scopes <- NULL  # Remove the original nested 'scopes' column now that it's been flattened

all_assessments  # Display the final combined assessments data frame in the console

############################################################################################################
# Now let's plot the data
library(dplyr)
library(ggplot2)
amph <- read.csv(file.choose(), header = TRUE, sep = ",") # Load the data of all assessments
rept <- read.csv(file.choose(), header = TRUE, sep = ",") # Load the data of all assessments

# Function to create heatmap 
plot_heatmap <- function(df, title) {
  
  # Define the typical IUCN order
  iucn_order <- c("LC", "NT", "VU", "EN", "CR", "EW", "EX")
  
  df <- df %>%
    mutate(
      red_list_category_code = factor(red_list_category_code,
                                      levels = iucn_order,
                                      ordered = TRUE)
    )
  
  # Range of years in the dataset
  year_range <- range(df$year_published, na.rm = TRUE)
  
  ggplot(df, aes(x = year_published, 
                 y = taxon_scientific_name, 
                 fill = red_list_category_code)) +
    geom_tile(color = "grey70") +
    scale_fill_brewer(type = "seq", palette = "Reds", na.value = "white", name = "IUCN Category") +
    scale_x_continuous(breaks = seq(year_range[1], year_range[2], by = 1)) +
    labs(title = title,
         x = "Assessment Year",
         y = "Species") +
    theme_minimal() +
    theme(
      axis.text.y = element_text(size = 6),
      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
      panel.grid = element_blank()
    )
}

# Amphibians heatmap
plot_heatmap(amph, "Amphibians: IUCN Red List Assessments")

# Reptiles heatmap
plot_heatmap(rept, "Reptiles: IUCN Red List Assessments")

